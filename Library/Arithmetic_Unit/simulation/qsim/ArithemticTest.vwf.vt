// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/12/2015 12:21:55"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Arithmetic_Unit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Arithmetic_Unit_vlg_sample_tst(
	a,
	b,
	cin,
	sampler_tx
);
input [3:0] a;
input [3:0] b;
input  cin;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or cin)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Arithmetic_Unit_vlg_check_tst (
	cout,
	F,
	sampler_rx
);
input  cout;
input [3:0] F;
input sampler_rx;

reg  cout_expected;
reg [3:0] F_expected;

reg  cout_prev;
reg [3:0] F_prev;

reg  cout_expected_prev;
reg [3:0] F_expected_prev;

reg  last_cout_exp;
reg [3:0] last_F_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	cout_prev = cout;
	F_prev = F;
end

// update expected /o prevs

always @(trigger)
begin
	cout_expected_prev = cout_expected;
	F_expected_prev = F_expected;
end



// expected cout
initial
begin
	cout_expected = 1'bX;
end 
// expected F[ 3 ]
initial
begin
	F_expected[3] = 1'bX;
end 
// expected F[ 2 ]
initial
begin
	F_expected[2] = 1'bX;
end 
// expected F[ 1 ]
initial
begin
	F_expected[1] = 1'bX;
end 
// expected F[ 0 ]
initial
begin
	F_expected[0] = 1'bX;
end 
// generate trigger
always @(cout_expected or cout or F_expected or F)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cout = %b | expected F = %b | ",cout_expected_prev,F_expected_prev);
	$display("| real cout = %b | real F = %b | ",cout_prev,F_prev);
`endif
	if (
		( cout_expected_prev !== 1'bx ) && ( cout_prev !== cout_expected_prev )
		&& ((cout_expected_prev !== last_cout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cout_expected_prev);
		$display ("     Real value = %b", cout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cout_exp = cout_expected_prev;
	end
	if (
		( F_expected_prev[0] !== 1'bx ) && ( F_prev[0] !== F_expected_prev[0] )
		&& ((F_expected_prev[0] !== last_F_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[0] = F_expected_prev[0];
	end
	if (
		( F_expected_prev[1] !== 1'bx ) && ( F_prev[1] !== F_expected_prev[1] )
		&& ((F_expected_prev[1] !== last_F_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[1] = F_expected_prev[1];
	end
	if (
		( F_expected_prev[2] !== 1'bx ) && ( F_prev[2] !== F_expected_prev[2] )
		&& ((F_expected_prev[2] !== last_F_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[2] = F_expected_prev[2];
	end
	if (
		( F_expected_prev[3] !== 1'bx ) && ( F_prev[3] !== F_expected_prev[3] )
		&& ((F_expected_prev[3] !== last_F_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F_exp[3] = F_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Arithmetic_Unit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] a;
reg [3:0] b;
reg cin;
// wires                                               
wire cout;
wire [3:0] F;

wire sampler;                             

// assign statements (if any)                          
Arithmetic_Unit i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.cin(cin),
	.cout(cout),
	.F(F)
);
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
	a[3] = #400000 1'b1;
	a[3] = #400000 1'b0;
end 
// a[ 2 ]
initial
begin
	repeat(2)
	begin
		a[2] = 1'b0;
		a[2] = #200000 1'b1;
		# 200000;
	end
	a[2] = 1'b0;
end 
// a[ 1 ]
always
begin
	a[1] = 1'b0;
	a[1] = #100000 1'b1;
	#100000;
end 
// a[ 0 ]
always
begin
	a[0] = 1'b0;
	a[0] = #50000 1'b1;
	#50000;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b0;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b0;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b0;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b1;
end 

// cin
initial
begin
	cin = 1'b0;
end 

Arithmetic_Unit_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.cin(cin),
	.sampler_tx(sampler)
);

Arithmetic_Unit_vlg_check_tst tb_out(
	.cout(cout),
	.F(F),
	.sampler_rx(sampler)
);
endmodule

