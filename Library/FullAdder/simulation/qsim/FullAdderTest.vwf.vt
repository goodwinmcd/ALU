// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/12/2015 12:03:32"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    FullAdder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FullAdder_vlg_sample_tst(
	A,
	B,
	Cin,
	sampler_tx
);
input  A;
input  B;
input  Cin;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or Cin)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module FullAdder_vlg_check_tst (
	cout,
	S,
	sampler_rx
);
input  cout;
input  S;
input sampler_rx;

reg  cout_expected;
reg  S_expected;

reg  cout_prev;
reg  S_prev;

reg  cout_expected_prev;
reg  S_expected_prev;

reg  last_cout_exp;
reg  last_S_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	cout_prev = cout;
	S_prev = S;
end

// update expected /o prevs

always @(trigger)
begin
	cout_expected_prev = cout_expected;
	S_expected_prev = S_expected;
end



// expected cout
initial
begin
	cout_expected = 1'bX;
end 

// expected S
initial
begin
	S_expected = 1'bX;
end 
// generate trigger
always @(cout_expected or cout or S_expected or S)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cout = %b | expected S = %b | ",cout_expected_prev,S_expected_prev);
	$display("| real cout = %b | real S = %b | ",cout_prev,S_prev);
`endif
	if (
		( cout_expected_prev !== 1'bx ) && ( cout_prev !== cout_expected_prev )
		&& ((cout_expected_prev !== last_cout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cout_expected_prev);
		$display ("     Real value = %b", cout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cout_exp = cout_expected_prev;
	end
	if (
		( S_expected_prev !== 1'bx ) && ( S_prev !== S_expected_prev )
		&& ((S_expected_prev !== last_S_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_exp = S_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module FullAdder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg Cin;
// wires                                               
wire cout;
wire S;

wire sampler;                             

// assign statements (if any)                          
FullAdder i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.Cin(Cin),
	.cout(cout),
	.S(S)
);

// A
initial
begin
	A = 1'b0;
	A = #40000 1'b1;
	A = #90000 1'b0;
	A = #80000 1'b1;
	A = #70000 1'b0;
	A = #70000 1'b1;
	A = #70000 1'b0;
	A = #60000 1'b1;
	A = #80000 1'b0;
end 

// B
initial
begin
	B = 1'b0;
	B = #130000 1'b1;
	B = #150000 1'b0;
	B = #140000 1'b1;
	B = #140000 1'b0;
end 

// Cin
initial
begin
	Cin = 1'b0;
	Cin = #280000 1'b1;
	Cin = #280000 1'b0;
end 

FullAdder_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.Cin(Cin),
	.sampler_tx(sampler)
);

FullAdder_vlg_check_tst tb_out(
	.cout(cout),
	.S(S),
	.sampler_rx(sampler)
);
endmodule

